#!/usr/bin/env tsx

import React, { useState, useEffect } from 'react';
import { render, Box, Text } from 'ink';
import Spinner from 'ink-spinner';
import TextInput from 'ink-text-input';
import { createClient } from '@supabase/supabase-js';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';

type Step = {
	name: string;
	status: 'pending' | 'running' | 'success' | 'error';
	message?: string;
};

const SetupAdminApp = () => {
	const [currentStep, setCurrentStep] = useState(0);
	const [steps, setSteps] = useState<Step[]>([
		{ name: 'Load Supabase credentials', status: 'pending' },
		{ name: 'Generate admin credentials', status: 'pending' },
		{ name: 'Create admin user', status: 'pending' },
		{ name: 'Update environment files', status: 'pending' },
	]);
	const [supabaseUrl, setSupabaseUrl] = useState('');
	const [supabaseServiceKey, setSupabaseServiceKey] = useState('');
	const [adminEmail, setAdminEmail] = useState('');
	const [adminPassword, setAdminPassword] = useState('');
	const [needsServiceKey, setNeedsServiceKey] = useState(false);
	const [serviceKeyInput, setServiceKeyInput] = useState('');
	const [completed, setCompleted] = useState(false);
	const [error, setError] = useState<string | null>(null);

	const updateStep = (index: number, status: Step['status'], message?: string) => {
		setSteps(prev => {
			const newSteps = [...prev];
			newSteps[index] = { ...newSteps[index], status, message };
			return newSteps;
		});
	};

	const generatePassword = () => {
		return crypto.randomBytes(32).toString('base64url');
	};

	const loadEnvFile = (filePath: string): Record<string, string> => {
		const vars: Record<string, string> = {};
		if (!fs.existsSync(filePath)) {
			return vars;
		}

		const content = fs.readFileSync(filePath, 'utf-8');
		const lines = content.split('\n');

		for (const line of lines) {
			const trimmedLine = line.trim();
			if (trimmedLine && !trimmedLine.startsWith('#')) {
				const match = trimmedLine.match(/^([^=]+)=(.*)$/);
				if (match) {
					const key = match[1].trim();
					let value = match[2].trim();
					// Remove quotes if present
					if ((value.startsWith('"') && value.endsWith('"')) ||
					    (value.startsWith("'") && value.endsWith("'"))) {
						value = value.slice(1, -1);
					}
					vars[key] = value;
				}
			}
		}

		return vars;
	};

	const updateEnvFile = (filePath: string, updates: Record<string, string>) => {
		const existingVars = loadEnvFile(filePath);
		const mergedVars = { ...existingVars, ...updates };

		// Remove SUPABASE_SERVICE_ROLE_KEY if it exists
		delete mergedVars.SUPABASE_SERVICE_ROLE_KEY;

		const lines: string[] = [];

		// Add comment about admin credentials
		lines.push('# System Admin Credentials (DO NOT SHARE)');
		lines.push('# Generated by: npx agent-orchestrator setup-admin');
		lines.push('');

		// Write all variables
		for (const [key, value] of Object.entries(mergedVars)) {
			lines.push(`${key}=${value}`);
		}

		fs.writeFileSync(filePath, lines.join('\n') + '\n');
	};

	const runSetup = async () => {
		try {
			// Step 0: Load Supabase credentials
			setCurrentStep(0);
			updateStep(0, 'running');

			// Try to load from .env files
			const rootEnv = loadEnvFile(path.join(process.cwd(), '.env'));
			const webEnv = loadEnvFile(path.join(process.cwd(), 'web', '.env'));
			const daemonEnv = loadEnvFile(path.join(process.cwd(), 'agent-orchestrator-daemon', '.env'));

			const url = rootEnv.NEXT_PUBLIC_SUPABASE_URL ||
			           webEnv.NEXT_PUBLIC_SUPABASE_URL ||
			           daemonEnv.NEXT_PUBLIC_SUPABASE_URL || '';

			const serviceKey = rootEnv.SUPABASE_SERVICE_ROLE_KEY ||
			                  webEnv.SUPABASE_SERVICE_ROLE_KEY ||
			                  daemonEnv.SUPABASE_SERVICE_ROLE_KEY || '';

			if (!url) {
				throw new Error('NEXT_PUBLIC_SUPABASE_URL not found in any .env file. Please run install first.');
			}

			setSupabaseUrl(url);

			if (!serviceKey) {
				updateStep(0, 'running', 'Service role key not found. Please enter it:');
				setNeedsServiceKey(true);
				return;
			}

			setSupabaseServiceKey(serviceKey);
			updateStep(0, 'success', 'Credentials loaded');

			// Step 1: Generate admin credentials
			setCurrentStep(1);
			updateStep(1, 'running');

			const adminEmail = 'admin@system.local';
			const adminPassword = generatePassword();

			setAdminEmail(adminEmail);
			setAdminPassword(adminPassword);

			updateStep(1, 'success', `Admin email: ${adminEmail}`);

			// Step 2: Create admin user
			setCurrentStep(2);
			updateStep(2, 'running');

			const supabaseAdmin = createClient(url, serviceKey, {
				auth: {
					autoRefreshToken: false,
					persistSession: false
				}
			});

			// Check if admin user already exists
			const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers();
			const existingAdmin = existingUsers?.users.find(u => u.email === adminEmail);

			if (existingAdmin) {
				// Update existing admin user password and metadata
				const { error: updateError } = await supabaseAdmin.auth.admin.updateUserById(
					existingAdmin.id,
					{
						password: adminPassword,
						user_metadata: {
							is_system_admin: true,
							created_by: 'setup-admin-cli',
							updated_at: new Date().toISOString()
						}
					}
				);

				if (updateError) {
					throw new Error(`Failed to update admin user: ${updateError.message}`);
				}

				updateStep(2, 'success', 'Admin user updated (password rotated)');
			} else {
				// Create new admin user
				const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
					email: adminEmail,
					password: adminPassword,
					email_confirm: true,
					user_metadata: {
						is_system_admin: true,
						created_by: 'setup-admin-cli',
						created_at: new Date().toISOString()
					}
				});

				if (createError) {
					throw new Error(`Failed to create admin user: ${createError.message}`);
				}

				updateStep(2, 'success', 'Admin user created');
			}

			// Step 3: Update environment files
			setCurrentStep(3);
			updateStep(3, 'running');

			const adminCredentials = {
				ADMIN_USER_EMAIL: adminEmail,
				ADMIN_USER_PASSWORD: adminPassword,
			};

			// Update web/.env
			const webEnvPath = path.join(process.cwd(), 'web', '.env');
			if (fs.existsSync(webEnvPath)) {
				updateEnvFile(webEnvPath, adminCredentials);
			}

			// Update agent-orchestrator-daemon/.env
			const daemonEnvPath = path.join(process.cwd(), 'agent-orchestrator-daemon', '.env');
			if (fs.existsSync(daemonEnvPath)) {
				updateEnvFile(daemonEnvPath, adminCredentials);
			}

			updateStep(3, 'success', 'Environment files updated');

			setCompleted(true);
		} catch (err) {
			const errorMessage = err instanceof Error ? err.message : 'Unknown error';
			updateStep(currentStep, 'error', errorMessage);
			setError(errorMessage);
		}
	};

	const continueWithServiceKey = async () => {
		setNeedsServiceKey(false);
		setSupabaseServiceKey(serviceKeyInput);
		updateStep(0, 'success', 'Credentials loaded');

		// Continue setup
		try {
			// Step 1: Generate admin credentials
			setCurrentStep(1);
			updateStep(1, 'running');

			const adminEmail = 'admin@system.local';
			const adminPassword = generatePassword();

			setAdminEmail(adminEmail);
			setAdminPassword(adminPassword);

			updateStep(1, 'success', `Admin email: ${adminEmail}`);

			// Step 2: Create admin user
			setCurrentStep(2);
			updateStep(2, 'running');

			const supabaseAdmin = createClient(supabaseUrl, serviceKeyInput, {
				auth: {
					autoRefreshToken: false,
					persistSession: false
				}
			});

			// Check if admin user already exists
			const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers();
			const existingAdmin = existingUsers?.users.find(u => u.email === adminEmail);

			if (existingAdmin) {
				// Update existing admin user password and metadata
				const { error: updateError } = await supabaseAdmin.auth.admin.updateUserById(
					existingAdmin.id,
					{
						password: adminPassword,
						user_metadata: {
							is_system_admin: true,
							created_by: 'setup-admin-cli',
							updated_at: new Date().toISOString()
						}
					}
				);

				if (updateError) {
					throw new Error(`Failed to update admin user: ${updateError.message}`);
				}

				updateStep(2, 'success', 'Admin user updated (password rotated)');
			} else {
				// Create new admin user
				const { data: newUser, error: createError } = await supabaseAdmin.auth.admin.createUser({
					email: adminEmail,
					password: adminPassword,
					email_confirm: true,
					user_metadata: {
						is_system_admin: true,
						created_by: 'setup-admin-cli',
						created_at: new Date().toISOString()
					}
				});

				if (createError) {
					throw new Error(`Failed to create admin user: ${createError.message}`);
				}

				updateStep(2, 'success', 'Admin user created');
			}

			// Step 3: Update environment files
			setCurrentStep(3);
			updateStep(3, 'running');

			const adminCredentials = {
				ADMIN_USER_EMAIL: adminEmail,
				ADMIN_USER_PASSWORD: adminPassword,
			};

			// Update web/.env
			const webEnvPath = path.join(process.cwd(), 'web', '.env');
			if (fs.existsSync(webEnvPath)) {
				updateEnvFile(webEnvPath, adminCredentials);
			}

			// Update agent-orchestrator-daemon/.env
			const daemonEnvPath = path.join(process.cwd(), 'agent-orchestrator-daemon', '.env');
			if (fs.existsSync(daemonEnvPath)) {
				updateEnvFile(daemonEnvPath, adminCredentials);
			}

			updateStep(3, 'success', 'Environment files updated');

			setCompleted(true);
		} catch (err) {
			const errorMessage = err instanceof Error ? err.message : 'Unknown error';
			updateStep(currentStep, 'error', errorMessage);
			setError(errorMessage);
		}
	};

	useEffect(() => {
		runSetup();
	}, []);

	return (
		<Box flexDirection="column" padding={1}>
			<Box marginBottom={1}>
				<Text bold color="blue">
					Agent Orchestrator - Admin User Setup
				</Text>
			</Box>

			{steps.map((step, index) => (
				<Box key={index} marginBottom={0}>
					<Box width={3}>
						{step.status === 'pending' && <Text dimColor>○</Text>}
						{step.status === 'running' && (
							<Text color="blue">
								<Spinner type="dots" />
							</Text>
						)}
						{step.status === 'success' && <Text color="green">✓</Text>}
						{step.status === 'error' && <Text color="red">✗</Text>}
					</Box>
					<Box flexDirection="column">
						<Text color={step.status === 'error' ? 'red' : undefined}>
							{step.name}
						</Text>
						{step.message && (
							<Text dimColor> {step.message}</Text>
						)}
					</Box>
				</Box>
			))}

			{needsServiceKey && (
				<Box flexDirection="column" marginTop={1} borderStyle="round" borderColor="yellow" padding={1}>
					<Text color="yellow" bold>
						Service Role Key Required
					</Text>
					<Text>
						Enter your Supabase service role key:
					</Text>
					<Text dimColor>
						(This will only be used once to create the admin user)
					</Text>
					<Box marginTop={1}>
						<Text color="cyan">Key: </Text>
						<TextInput
							value={serviceKeyInput}
							onChange={setServiceKeyInput}
							onSubmit={continueWithServiceKey}
						/>
					</Box>
				</Box>
			)}

			{completed && (
				<Box flexDirection="column" marginTop={1} borderStyle="round" borderColor="green" padding={1}>
					<Text color="green" bold>
						✓ Admin Setup Complete!
					</Text>
					<Text>
						Admin credentials have been saved to your .env files:
					</Text>
					<Box marginTop={1} flexDirection="column">
						<Text>
							<Text color="cyan">Email:</Text> {adminEmail}
						</Text>
						<Text>
							<Text color="cyan">Password:</Text> {adminPassword.substring(0, 20)}...
						</Text>
					</Box>
					<Box marginTop={1} flexDirection="column">
						<Text bold color="yellow">
							⚠ Important Security Notes:
						</Text>
						<Text>• Store these credentials securely</Text>
						<Text>• Never commit .env files to git</Text>
						<Text>• Run this command again to rotate the password</Text>
						<Text>• SUPABASE_SERVICE_ROLE_KEY has been removed from .env files</Text>
					</Box>
				</Box>
			)}

			{error && (
				<Box flexDirection="column" marginTop={1} borderStyle="round" borderColor="red" padding={1}>
					<Text color="red" bold>
						✗ Setup Failed
					</Text>
					<Text>{error}</Text>
				</Box>
			)}
		</Box>
	);
};

render(<SetupAdminApp />);
