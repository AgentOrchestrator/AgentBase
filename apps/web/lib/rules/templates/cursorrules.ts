/**
 * Generate .cursorrules file from approved rules
 */

import type { Rule } from '../types';
import { groupByCategory, formatCategory } from '../rules-formatter';

export function generateCursorRules(rules: Rule[]): string {
  const grouped = groupByCategory(rules);

  let content = `# Cursor AI Rules
# Generated by Agent Orchestrator - Shared Memory System
# Last updated: ${new Date().toISOString()}
# Total rules: ${rules.length}

`;

  // Sort categories for consistent output
  const categories = Object.keys(grouped).sort();

  for (const category of categories) {
    const categoryRules = grouped[category as keyof typeof grouped];
    if (!categoryRules || categoryRules.length === 0) continue;

    content += `## ${formatCategory(category as any)}\n\n`;

    // Sort rules by confidence (highest first)
    const sortedRules = categoryRules.sort((a, b) => b.confidence_score - a.confidence_score);

    for (const rule of sortedRules) {
      content += `- ${rule.rule_text}\n`;
    }

    content += '\n';
  }

  return content;
}
